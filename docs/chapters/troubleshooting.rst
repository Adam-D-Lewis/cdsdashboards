.. _troubleshooting:

Troubleshooting
---------------

Please do :ref:`get in touch<contact>` with any questions at all - we really want to help you configure ContainDS Dashboards and get up and running.

Debug Logs
~~~~~~~~~~

Please consult your JupyterHub distribution to understand how to access logs. For example, 
here are `instructions for The Littlest JupyterHub <http://tljh.jupyter.org/en/latest/troubleshooting/logs.html>`__.

For problems within the Dashboards menu in JupyterHub, or JupyterHub startup problems, please see jupyterhub logs.

For problems at the stage where Dashboards seem to be built, but don't work once accessed, you need to find out where 
the 'notebook server' logs are located. Each Dashboard is run as a named server, just like the default 'My Server' where 
each user is able to run their Jupyter notebooks.

If your dashboard is called 'mydash', by default the corresponding notebook server will be called 'dash-mydash'. Check logs for that named server.

To force the notebook server to display extra debug information, add the following to your jupyterhub_config.py:

::

    c.Spawner.debug = True

Delete the existing named server from the user's Home page in Jupyter, then try building and accessing the Dashboard again.

Conda Kernels not found by Voila
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

Where the Voila debug logs show: :code:`Could not find a kernel named 'conda-env-myenv-py', will use  'python3'` or similar, this means 
Voila cannot find one of the Conda environments that you have made available to your notebooks. It may be that the notebook has come from 
a different server, so the kernel does not exist. Check to see if the kernel does exist and that it works correctly for 
Jupyter notebooks when run normally. Often, a kernel is registered in Jupyter to correspond to a each available Conda env.

If it seems that only Voila cannot find the kernel, it may be because you are using nb_conda_kernels. This is an extension for Jupyter 
that auto-discovers all Conda envs and makes them available as kernels. However, because they are auto-dsicovered within Jupyter each time, 
they are not properly registered for external services such as Voila to locate.

Auto-discovery of Conda envs is convenient, but nb_conda_kernels has not been maintained recently and some work is required to bring 
compatibility with the latest Jupyter releases. Our suggestion is to remove nb_conda_kernels and register each Conda env manually - with the 
same name to ensure existing notebooks can still find the correct environments.

If you inspect an existing raw ipynb file which has 'metadata' towards the end (it is just a text file), you can see the exact values 
generated by nb_conda_kernels for 'name' and 'display_name':

::

    "metadata": {
        "kernelspec": {
        "display_name": "Python [conda env:myenv]",
        "language": "python",
        "name": "conda-env-myenv-py"
    }...

In the activated myenv conda env you can install using these exact names taken from above: 
::
    python -m ipykernel install --name "conda-env-myenv-py" --display-name "Python [conda env:myenv]"

Remove nb_conda_kernels from the appropriate conda env: 
::
    conda uninstall --force nb_conda_kernels

If you don't remove nb_conda_kernels then each conda env will appear twice.

If you must keep auto-discovery of new environments, it is recommended to also manually register each env (ipykernel install) that may be used for Voila Dashboards, 
perhaps with slightly different names to the auto-discovered equivalents.

